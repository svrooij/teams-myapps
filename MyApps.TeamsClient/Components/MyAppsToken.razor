@using System.IO
@using System.Linq
@using Azure.Core
@using Microsoft.Graph
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential
@inject HttpClient httpClient

<div>
@*    <h2>Get the user apps</h2>*@
    @if (NeedConsent)
    {
        <p>Click below to authorize this app to read your apps through MyApps.</p>
        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="ConsentAndShow">Authorize</FluentButton>
    }
    @if (IsLoading)
    {
        @*<ProfileCard IsLoading="true" />*@
        <FluentProgressRing style="width: 102px; height: 102px;"></FluentProgressRing>

    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
@*    else if (Token != null)
    {
        <pre>@Token</pre>

    }*@

@*    @if(Result != null) {
        <pre style="overflow:auto;height:200px;">@Result</pre>
    }*@

    @if(Tiles != null)
    {
@*        <ul>
            @foreach (var tile in Tiles)
            {
                <li><a href="@tile.FastLaunchUrl" target="_blank">@tile.DisplayName</a></li>
            }
        </ul>*@
        <FluentDivider/>
        <div>
            @foreach (var tile in Tiles)
            {
                
                <FluentCard class="grid-card">
                    <img src="@tile.LogoUrl" width="100" class="center" />
                    <h5 class="center">@tile.DisplayName</h5>
                    <a href="@tile.PersistentLaunchUrl" target="_blank" title="Open @tile.DisplayName"></a>
                </FluentCard>
                
            }
        </div>

        <p class="info">The apps are loaded from an internal api, which might break at any time</p>
    }


</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; }
    public bool NeedConsent { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    public string? Token { get; set; }
    public string? Result { get; set; }
    public IEnumerable<Models.Tile>? Tiles { get; set; }

    private readonly string _scope = "2793995e-0a7d-40d7-bd35-6968ba142197/workspace.read";// 2793995e-0a7d-40d7-bd35-6968ba142197/Directory.Read.All 2793995e-0a7d-40d7-bd35-6968ba142197/User.Read 2793995e-0a7d-40d7-bd35-6968ba142197/.default";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        if (await HasPermission(_scope))
        {
            IsLoading = false;
            await ShowApps();
        }
    }

    private async Task ShowApps()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://api.myapplications.microsoft.com/api/v2/me/tiles");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
            var response = await httpClient.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Models.ODataResult<System.Collections.Generic.IEnumerable<Models.Tile>>>();
                Tiles = result.Value.OrderBy(x => x.DisplayName);
                //Result = System.Text.Json.JsonSerializer.Serialize(Tiles, typeof(System.Collections.Generic.IEnumerable<Models.Tile>), new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
                //Result = await response.Content.ReadAsStringAsync();
            }
            response.EnsureSuccessStatusCode();
        } catch (Exception e)
        {
            ErrorMessage = e.Message;
        }

    }

    private async Task ConsentAndShow()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_scope);
            NeedConsent = false;
            await ShowApps();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task<bool> HasPermission(string scope)
    {
        IsLoading = true;
        try
        {
            Token = (await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken())).Token;
            return true;
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                NeedConsent = true;
            }
            else
            {
                ErrorMessage = e.Message;
            }

        }
        IsLoading = false;
        return false;
    }

}
