@using System.IO
@using System.Linq
@inject TeamsFx teamsfx
@inject HttpClient httpClient

<div>
    <h2>Coding Stephan</h2>
    <p>My most recent blog posts. (Can off cource be changed to internal company news 😉)</p>

    @if (IsLoading)
    {
        @*<ProfileCard IsLoading="true" />*@
        <FluentProgressRing style="width: 102px; height: 102px;"></FluentProgressRing>
    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }


    @if(Posts != null)
    {

        <FluentDivider/>
        <div>
            @foreach (var post in Posts)
            {
                MarkupString ms = (MarkupString)post.Summary;
                <FluentCard class="blog-card">
                    <h3>@post.Title</h3>
                    @ms
                    <p class="text-small">
                        @string.Join(" & ", post.Tags) | @post.DatePublished?.ToString("yyyy-MM-dd")
                    </p>
                    <a href="@post.FullUrl" target="_blank"></a>
                </FluentCard>
                
            }
        </div>
    }


</div>

@code {
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; } = true;

    public IEnumerable<Models.JsonPost>? Posts { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "https://svrooij.io/feed.json");
            //request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
            var response = await httpClient.SendAsync(request);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Models.JsonFeed>();
                Posts = result.Posts.Take(5);
                //Result = System.Text.Json.JsonSerializer.Serialize(Tiles, typeof(System.Collections.Generic.IEnumerable<Models.Tile>), new System.Text.Json.JsonSerializerOptions { WriteIndented = true });
                //Result = await response.Content.ReadAsStringAsync();
            }
            response.EnsureSuccessStatusCode();
            
        } catch (Exception e)
        {
            ErrorMessage = e.Message;
        }

        IsLoading = false;

    }

}
