@using System.IO
@using Azure.Core
@using Microsoft.Graph
@inject TeamsFx teamsfx
@inject TeamsUserCredential teamsUserCredential

<div>
    <h2>Setup your profile</h2>
    <p>We would like to ask you to upload a profile picture and to tell us something about yourself.</p>


    @if (NeedConsent)
    {
        <p>Click below to authorize this app to read your profile photo using Microsoft Graph.</p>
        <FluentButton Appearance="Appearance.Accent" Disabled="@IsLoading" @onclick="ConsentAndShow">Authorize</FluentButton>
    }
    @if (IsLoading)
    {
        <ProfileCard IsLoading="true" />
    }
    else if (!string.IsNullOrEmpty(@ErrorMessage))
    {
        <div class="error">@ErrorMessage</div>
    }
    else if (Profile != null)
    {
        @*<ProfileCard IsLoading="false" Profile="@Profile" UserPhotoUri="@UserPhotoUri" />*@
        <div style="text-align:left">
            <FluentTextField @bind-Value=DisplayName Readonly>Display name</FluentTextField>
        <FluentTextField @bind-Value=JobTitle>Job title</FluentTextField>
        <FluentTextArea @bind-Value=AboutMe style="width: 100%; margin:10px 0;">About me</FluentTextArea>
        <FluentButton Appearance="Appearance.Accent">Save details</FluentButton>
        </div>

    }
</div>

@code {
    [Parameter]
    public string ErrorMessage { get; set; }

    public bool IsLoading { get; set; }
    public bool NeedConsent { get; set; }
    public User Profile { get; set; }
    public string UserPhotoUri { get; set; }

    string? DisplayName { get; set; }
    string? JobTitle { get; set; }
    string? AboutMe { get; set; }

    private readonly string _scope = "User.Read";

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        if (await HasPermission(_scope))
        {
            await ShowProfile();
        }
    }

    private async Task ShowProfile()
    {
        IsLoading = true;
        var graph = GetGraphServiceClient();

        Profile = await graph.Me.Request().Select("displayName,aboutMe,jobTitle").GetAsync();
        DisplayName = Profile.DisplayName;
        AboutMe = Profile.AboutMe;
        UserPhotoUri = await GetPhotoAsync(graph);

        IsLoading = false;
        ErrorMessage = string.Empty;
    }

    private async Task ConsentAndShow()
    {
        try
        {
            await teamsUserCredential.LoginAsync(_scope);
            NeedConsent = false;
            await ShowProfile();
        }
        catch (ExceptionWithCode e)
        {
            ErrorMessage = e.Message;
        }
    }

    private async Task<bool> HasPermission(string scope)
    {
        IsLoading = true;
        try
        {
            await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { _scope }), new System.Threading.CancellationToken());
            return true;
        }
        catch (ExceptionWithCode e)
        {
            if (e.Code == ExceptionCode.UiRequiredError)
            {
                NeedConsent = true;
            }
            else
            {
                ErrorMessage = e.Message;
            }

        }
        IsLoading = false;
        return false;
    }
    
    private GraphServiceClient GetGraphServiceClient()
    {
        var msGraphAuthProvider = new MsGraphAuthProvider(teamsUserCredential, _scope);
        var client = new GraphServiceClient(msGraphAuthProvider);
        return client;
    }

    private async Task<string> GetPhotoAsync(GraphServiceClient graph)
    {
        string userPhoto = "";
        try
        {
            var photoStream = await graph.Me.Photo.Content.Request().GetAsync();

            if (photoStream != null)
            {
                // Copy the photo stream to a memory stream
                // to get the bytes out of it
                var memoryStream = new MemoryStream();
                photoStream.CopyTo(memoryStream);
                var photoBytes = memoryStream.ToArray();

                // Generate a data URI for the photo
                userPhoto = $"data:image/png;base64,{Convert.ToBase64String(photoBytes)}";
            }
        }
        catch (Exception) { /* Unable to get the users photo */ }

        return userPhoto;
    }
}
